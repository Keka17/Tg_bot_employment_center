import os

from aiogram import Router, Bot, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from dotenv import load_dotenv

from text import *


load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=os.getenv('TOKEN'))
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

# –ù–∞—á–∞—Ç—å
@router.message(Command('start'))
async def cmd_start(msg: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£—Å–ª—É–≥–∏", callback_data="open_services")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data="open_about")],
            [InlineKeyboardButton(text="üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
        ]
    )

    await bot.send_message(
        msg.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç <b>–¶–µ–Ω—Ç—Ä–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞</b>!\n\n"
        "–ß—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "open_services")
async def open_services(callback: CallbackQuery):
    await cmd_services(callback.message)
    await callback.answer()


@router.callback_query(F.data == "open_about")
async def open_about(callback: CallbackQuery):
    await cmd_about(callback.message)
    await callback.answer()

@router.callback_query(F.data == "feedback")
async def open_feedback(callback: CallbackQuery):
    await cmd_feedback(callback.message)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
@router.message(Command('about'))
async def cmd_about(msg: Message):

    # Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É /start
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
        ]
    )

    await bot.send_message(msg.chat.id, ABOUT_TEXT, parse_mode='HTML', reply_markup=keyboard)

# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏
@router.message(Command('services'))
async def cmd_services(msg: Message):
    text = """<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:</b>"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º", callback_data="services_employers")],
            [InlineKeyboardButton(text="–ì—Ä–∞–∂–¥–∞–Ω–∞–º", callback_data="services_citizens")],
            [InlineKeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='services_faq')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
        ]
    )

    await bot.send_message(msg.chat.id, text, parse_mode="HTML", reply_markup=keyboard)


# –ù–∞—á–∞—Ç—å -> –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
@router.message(Command('feedback'))
async def cmd_feedback(msg: Message):
    text = ("–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, "
            "–ª–∏–±–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ —ç—Ç–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞, "
            "‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É."
            "\nüìå –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ: <a href='https://docs.google.com/forms/d/e/1FAIpQLSfnqIvWSbgOM_IEXWvR20FVH2fPDnowY-X28apDuiYfJmaGfA/viewform?usp=dialog'>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>"
            "\n –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
        ]
    )

    await bot.send_message(msg.chat.id, text, parse_mode="HTML", reply_markup=keyboard)


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –†–∞–±–æ–¥–æ—Ç–∞–¥–µ–ª—è–º
@router.callback_query(F.data == "services_employers")
async def services_employers(callback: CallbackQuery):
    text = "<b>–£—Å–ª—É–≥–∏ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:</b>"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", callback_data="employers_recruitment")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ. –æ–±—É—á–µ–Ω–∏–µ", callback_data="employers_professional_education")],
            [InlineKeyboardButton(text="–°–µ–º–∏–Ω–∞—Ä—ã", callback_data="employers_seminars")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –†–∞–±–æ–¥–æ—Ç–∞–¥–µ–ª—è–º -> –ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
@router.callback_query(F.data == "employers_recruitment")
async def employers_recruitment(callback: CallbackQuery):
    text = ("üìÑ<b>–î–æ–∫—É–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–±—Ä–æ–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:</b>"
            "<a href='https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FYdltfNbH8CZOeeBFWU%2B5Jq0xZx9YjEaMwWWI4IWZ0oO%2BcplcQHsDQgwmv2o5IjQiq%2FJ6bpmRyOJonT3VoXnDag%3D%3D&name=–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ_—Ä–∞–∑–º–µ—â–µ–Ω–∏—é_–≤–∞–∫–∞–Ω—Å–∏–π_–∏_–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞_—Ä–∞–±–æ—á–∏—Ö_–º–µ—Å—Ç%20(5).pdf'> "
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç</a>")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_employers")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –†–∞–±–æ–¥–æ—Ç–∞–¥–µ–ª—è–º -> –ü—Ä–æ—Ñ. –æ–±—É—á–µ–Ω–∏–µ
@router.callback_query(F.data == "employers_professional_education")
async def employers_professional_education(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_employers")]
        ]
    )

    await callback.message.edit_text(EMPLOYERS_PROFESSIONAL_EDUCATION_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –†–∞–±–æ–¥–æ—Ç–∞–¥–µ–ª—è–º -> –°–µ–º–∏–Ω–∞—Ä—ã
@router.callback_query(F.data == "employers_seminars")
async def employers_seminars(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_employers")]
        ]
    )

    await callback.message.edit_text(EMPLOYERS_SEMINARS_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ì—Ä–∞–∂–¥–∞–Ω–∞–º
@router.callback_query(F.data == "services_citizens")
async def services_citizens(callback: CallbackQuery):
    text = "<b>–£—Å–ª—É–≥–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω:</b>"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="guidance_tests")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ. –æ–±—É—á–µ–Ω–∏–µ", callback_data="citizens_professional_education")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
            [InlineKeyboardButton(text="–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è", callback_data="application")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ì—Ä–∞–∂–¥–∞–Ω–∞–º -> –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
@router.callback_query(F.data == "guidance_tests")
async def guidance_tests(callback: CallbackQuery):
    text = ("–ù–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤—ã–±—Ä–∞—Ç—å?"
            " –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ "
            "–ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–∞–±–æ—Ç—É: <a href='https://trudvsem.ru/proforientation/testing'>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</a>")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_citizens")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ì—Ä–∞–∂–¥–∞–Ω–∞–º -> –ü—Ä–æ—Ñ. –æ–±—É—á–µ–Ω–∏–µ
@router.callback_query(F.data == "citizens_professional_education")
async def citizens_professional_education(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_citizens")]
        ]
    )

    await callback.message.edit_text(CITIZENS_PROFFESIONAL_EDUCATION_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ì—Ä–∞–∂–¥–∞–Ω–∞–º -> –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "events")
async def events(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_citizens")]
        ]
    )

    await callback.message.edit_text(EVENTS_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ì—Ä–∞–∂–¥–∞–Ω–∞–º -> –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == "application")
async def application(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services_citizens")]
        ]
    )

    await callback.message.edit_text(APPLICATION_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û
@router.callback_query(F.data == "services_faq")
async def services_faq(callback: CallbackQuery):
    text = "<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º?",
                                  callback_data="is_not_unemployed")],
            [InlineKeyboardButton(text="–†–∞–∑–º–µ—Ä –ø–æ—Å–æ–±–∏—è –ø–æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ –∏ –µ—ë –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è",
                                  callback_data="compensation_info")],
            [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ",
                                  callback_data="re_registration_as_unemployed")],
            [InlineKeyboardButton(text="–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω",
                                  callback_data="re_regestration_unemployed_citizens")],
            [InlineKeyboardButton(text="–ö–∞–∫ —Å–Ω—è—Ç—å—Å—è —Å —É—á—ë—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ?",
                                  callback_data="how_to_deregister")],
            [InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–∑ –¶–ó–ù?",
                                  callback_data="how_to_get_certificate")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_services")]
        ]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –ö—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º?
@router.callback_query(F.data == "is_not_unemployed")
async def is_not_unemployed(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )
    await callback.message.edit_text(IS_NOT_UNEMPLOYED_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –†–∞–∑–º–µ—Ä –ø–æ—Å–æ–±–∏—è –ø–æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ –∏ –µ—ë –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è
@router.callback_query(F.data == "compensation_info")
async def compensation_info(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ", callback_data="show_image_1")],
            [InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Å–æ–±–∏–µ", callback_data="show_image_2")],
            [InlineKeyboardButton(text="–ú–∏–Ω. –ø–æ—Å–æ–±–∏–µ (–ø—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–π)",
                                  callback_data="show_image_3")],
            [InlineKeyboardButton(text="–ú–∞–∫—Å. –ø–æ—Å–æ–±–∏–µ (–ø—Ä–µ–¥–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–π)",
                                  callback_data="show_image_4")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )

    try:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ)
    except Exception:
        pass  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª", parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.callback_query(F.data.startswith("show_image_"))
async def show_selected_image(callback: CallbackQuery):
    image_number = callback.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = f"images/{image_number}.jpg"  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="compensation_info")]
        ]
    )

    try:
        photo = FSInputFile(image_path)
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=photo,
            caption="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É",
            reply_markup=keyboard
        )
    except FileNotFoundError:
        await callback.message.answer(
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            reply_markup=keyboard
        )

    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ
@router.callback_query(F.data == "re_registration_as_unemployed")
async def re_registration_as_unemployed(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )
    await callback.message.edit_text(RE_REGISTRATION_AS_UNEMPLOYED_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω
@router.callback_query(F.data == "re_regestration_unemployed_citizens")
async def re_regestration_unemployed_citizens(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )
    await callback.message.edit_text(RE_REGISTRATION_UNEMPLOYED_CITIZENS_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –ö–∞–∫ —Å–Ω—è—Ç—å—Å—è —Å —É—á—ë—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ?
@router.callback_query(F.data == "how_to_deregister")
async def how_to_deregister(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )
    await callback.message.edit_text(HOW_TO_DERIGISTER_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞—Ç—å -> –£—Å–ª—É–≥–∏ -> –ß–ê–í–û -> –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–∑ –¶–ó–ù?
@router.callback_query(F.data == "how_to_get_certificate")
async def how_to_get_certificate(callback: CallbackQuery):

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back_to_faq")]
        ]
    )
    await callback.message.edit_text(HOW_TO_GET_CERTIFICATE_TEXT, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"

# –∫ –ù–∞—á–∞–ª—É
@router.callback_query(lambda c: c.data == "go_back")
async def go_back(callback):
    await cmd_start(callback.message)
    await callback.answer()

# –∫ –£—Å–ª—É–≥–∞–º
@router.callback_query(F.data == "go_back_to_services")
async def go_back_to_services(callback: CallbackQuery):
    await cmd_services(callback.message)
    await callback.answer()

# –∫ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º
@router.callback_query(F.data == "go_back_to_services_employers")
async def go_back_to_services_employers(callback: CallbackQuery):
    await services_employers(callback)
    await callback.answer()

# –∫ –ì—Ä–∞–∂–¥–∞–Ω–∞–º
@router.callback_query(F.data == "go_back_to_services_citizens")
async def go_back_to_services_citizens(callback: CallbackQuery):
    await services_citizens(callback)
    await callback.answer()

# –∫ –ß–ê–í–û
@router.callback_query(F.data == "go_back_to_faq")
async def go_back_to_faq(callback: CallbackQuery):
    await services_faq(callback)
    await callback.answer()